package match

import (
	"rela_recommend/algo"
	"rela_recommend/algo/utils"
	rutils "rela_recommend/utils"
)

func getMatchFeatures(ctx algo.IContext, model algo.IAlgo, idata algo.IDataInfo) *utils.Features {
	fs := &utils.Features{}
	data := idata.(*DataInfo)
	memu := data.UserCache
	matp := data.MatchProfile

	// 用户
	var role, wantRoles = 0, make([]int, 0)
	if memu != nil {
		fs.Add(1, float32(memu.Age))
		fs.Add(2, float32(memu.Height))
		fs.Add(3, float32(memu.Weight))
		fs.AddCategory(10, 13, -1, rutils.GetInt(memu.Horoscope), -1)
		fs.AddCategory(11, 10, -1, memu.Affection, -1)
		role, wantRoles = rutils.GetInt(memu.RoleName), rutils.GetInts(memu.WantRole)
		fs.AddCategory(12, 10, -1, role, -1)
		fs.AddCategories(13, 10, -1, wantRoles, -1)
	}

	// 用户画像
	if matp != nil {
		fs.Add(2000, matp.AgeMap["age_18_20"])
		fs.Add(2001, matp.AgeMap["age_21_22"])
		fs.Add(2002, matp.AgeMap["age_23_24"])
		fs.Add(2003, matp.AgeMap["age_25_26"])
		fs.Add(2004, matp.AgeMap["age_27_29"])
		fs.Add(2005, matp.AgeMap["age_above_30"])
		fs.Add(2006, matp.AgeMap["age_unknown"])
		fs.Add(2007, matp.RoleNameMap["role_name_t"])
		fs.Add(2008, matp.RoleNameMap["role_name_p"])
		fs.Add(2009, matp.RoleNameMap["role_name_h"])
		fs.Add(2010, matp.RoleNameMap["role_name_bi"])
		fs.Add(2011, matp.RoleNameMap["role_name_other"])
		fs.Add(2012, matp.RoleNameMap["role_name_str"])
		fs.Add(2013, matp.RoleNameMap["role_name_fu"])
		fs.Add(2014, matp.RoleNameMap["role_name_unknown"])
		fs.Add(2015, matp.HoroscopeMap["horoscope_cap"])
		fs.Add(2016, matp.HoroscopeMap["horoscope_aqua"])
		fs.Add(2017, matp.HoroscopeMap["horoscope_pis"])
		fs.Add(2018, matp.HoroscopeMap["horoscope_ar"])
		fs.Add(2019, matp.HoroscopeMap["horoscope_tau"])
		fs.Add(2020, matp.HoroscopeMap["horoscope_gemini"])
		fs.Add(2021, matp.HoroscopeMap["horoscope_cancer"])
		fs.Add(2022, matp.HoroscopeMap["horoscope_leo"])
		fs.Add(2023, matp.HoroscopeMap["horoscope_virgo"])
		fs.Add(2024, matp.HoroscopeMap["horoscope_libra"])
		fs.Add(2025, matp.HoroscopeMap["horoscope_scor"])
		fs.Add(2026, matp.HoroscopeMap["horoscope_sagi"])
		fs.Add(2027, matp.HoroscopeMap["horoscope_unknown"])
		fs.Add(2028, matp.HeightMap["height_under_155"])
		fs.Add(2029, matp.HeightMap["height_156_160"])
		fs.Add(2030, matp.HeightMap["height_161_163"])
		fs.Add(2031, matp.HeightMap["height_164_166"])
		fs.Add(2032, matp.HeightMap["height_167_170"])
		fs.Add(2033, matp.HeightMap["height_171_180"])
		fs.Add(2034, matp.HeightMap["height_above_180"])
		fs.Add(2035, matp.HeightMap["height_unknown"])
		fs.Add(2036, matp.WeightMap["weight_under_41"])
		fs.Add(2037, matp.WeightMap["weight_42_45"])
		fs.Add(2038, matp.WeightMap["weight_46_49"])
		fs.Add(2039, matp.WeightMap["weight_50_52"])
		fs.Add(2040, matp.WeightMap["weight_53_57"])
		fs.Add(2041, matp.WeightMap["weight_above_58"])
		fs.Add(2042, matp.WeightMap["weight_unknown"])
		fs.Add(2043, matp.DistanceMap["dis_under_20"])
		fs.Add(2044, matp.DistanceMap["dis_21_40"])
		fs.Add(2045, matp.DistanceMap["dis_41_60"])
		fs.Add(2046, matp.DistanceMap["dis_61_80"])
		fs.Add(2047, matp.DistanceMap["dis_81_100"])
		fs.Add(2048, matp.DistanceMap["dis_101_200"])
		fs.Add(2049, matp.DistanceMap["dis_201_300"])
		fs.Add(2050, matp.DistanceMap["dis_301_400"])
		fs.Add(2051, matp.DistanceMap["dis_401_500"])
		fs.Add(2052, matp.DistanceMap["dis_above_500"])
		fs.Add(2053, matp.LikeTypeMap["like_type_like"])
		fs.Add(2054, matp.LikeTypeMap["like_type_dislike"])
		fs.Add(2055, matp.LikeTypeMap["like_type_superlike"])
		fs.Add(2056, matp.AffectionMap["affection_single"])
		fs.Add(2057, matp.AffectionMap["affection_dating"])
		fs.Add(2058, matp.AffectionMap["affection_stable"])
		fs.Add(2059, matp.AffectionMap["affection_married"])
		fs.Add(2060, matp.AffectionMap["affection_open_re"])
		fs.Add(2061, matp.AffectionMap["affection_relationship"])
		fs.Add(2062, matp.AffectionMap["affection_waiting"])
		fs.Add(2063, matp.AffectionMap["affection_secret"])
		fs.Add(2064, matp.MobileSysMap["mobile_sys_ios"])
		fs.Add(2065, matp.MobileSysMap["mobile_sys_android"])
		fs.Add(2066, matp.TotalCountMap["total_count"])
		fs.Add(2067, matp.FreqWeekMap["monday"])
		fs.Add(2068, matp.FreqWeekMap["tuesday"])
		fs.Add(2069, matp.FreqWeekMap["wednesday"])
		fs.Add(2070, matp.FreqWeekMap["thursday"])
		fs.Add(2071, matp.FreqWeekMap["friday"])
		fs.Add(2072, matp.FreqWeekMap["saturday"])
		fs.Add(2073, matp.FreqWeekMap["sunday"])
		fs.Add(2074, matp.FreqTimeMap["time_0_2"])
		fs.Add(2075, matp.FreqTimeMap["time_2_4"])
		fs.Add(2076, matp.FreqTimeMap["time_4_6"])
		fs.Add(2077, matp.FreqTimeMap["time_6_8"])
		fs.Add(2078, matp.FreqTimeMap["time_8_10"])
		fs.Add(2079, matp.FreqTimeMap["time_10_12"])
		fs.Add(2080, matp.FreqTimeMap["time_12_14"])
		fs.Add(2081, matp.FreqTimeMap["time_14_16"])
		fs.Add(2082, matp.FreqTimeMap["time_16_18"])
		fs.Add(2083, matp.FreqTimeMap["time_18_20"])
		fs.Add(2084, matp.FreqTimeMap["time_20_22"])
		fs.Add(2085, matp.FreqTimeMap["time_22_24"])
		fs.Add(2086, matp.ContinuesUse["coutinues_count"])

	}

	if matp != nil {
		fs.Add(5000, matp.AgeMap["age_18_20"])
		fs.Add(5001, matp.AgeMap["age_21_22"])
		fs.Add(5002, matp.AgeMap["age_23_24"])
		fs.Add(5003, matp.AgeMap["age_25_26"])
		fs.Add(5004, matp.AgeMap["age_27_29"])
		fs.Add(5005, matp.AgeMap["age_above_30"])
		fs.Add(5006, matp.AgeMap["age_unknown"])
		fs.Add(5007, matp.RoleNameMap["role_name_t"])
		fs.Add(5008, matp.RoleNameMap["role_name_p"])
		fs.Add(5009, matp.RoleNameMap["role_name_h"])
		fs.Add(5010, matp.RoleNameMap["role_name_bi"])
		fs.Add(5011, matp.RoleNameMap["role_name_other"])
		fs.Add(5012, matp.RoleNameMap["role_name_str"])
		fs.Add(5013, matp.RoleNameMap["role_name_fu"])
		fs.Add(5014, matp.RoleNameMap["role_name_unknown"])
		fs.Add(5015, matp.HoroscopeMap["horoscope_cap"])
		fs.Add(5016, matp.HoroscopeMap["horoscope_aqua"])
		fs.Add(5017, matp.HoroscopeMap["horoscope_pis"])
		fs.Add(5018, matp.HoroscopeMap["horoscope_ar"])
		fs.Add(5019, matp.HoroscopeMap["horoscope_tau"])
		fs.Add(5020, matp.HoroscopeMap["horoscope_gemini"])
		fs.Add(5021, matp.HoroscopeMap["horoscope_cancer"])
		fs.Add(5022, matp.HoroscopeMap["horoscope_leo"])
		fs.Add(5023, matp.HoroscopeMap["horoscope_virgo"])
		fs.Add(5024, matp.HoroscopeMap["horoscope_libra"])
		fs.Add(5025, matp.HoroscopeMap["horoscope_scor"])
		fs.Add(5026, matp.HoroscopeMap["horoscope_sagi"])
		fs.Add(5027, matp.HoroscopeMap["horoscope_unknown"])
		fs.Add(5028, matp.HeightMap["height_under_155"])
		fs.Add(5029, matp.HeightMap["height_156_160"])
		fs.Add(5030, matp.HeightMap["height_161_163"])
		fs.Add(5031, matp.HeightMap["height_164_166"])
		fs.Add(5032, matp.HeightMap["height_167_170"])
		fs.Add(5033, matp.HeightMap["height_171_180"])
		fs.Add(5034, matp.HeightMap["height_above_180"])
		fs.Add(5035, matp.HeightMap["height_unknown"])
		fs.Add(5036, matp.WeightMap["weight_under_41"])
		fs.Add(5037, matp.WeightMap["weight_42_45"])
		fs.Add(5038, matp.WeightMap["weight_46_49"])
		fs.Add(5039, matp.WeightMap["weight_50_52"])
		fs.Add(5040, matp.WeightMap["weight_53_57"])
		fs.Add(5041, matp.WeightMap["weight_above_58"])
		fs.Add(5042, matp.WeightMap["weight_unknown"])
		fs.Add(5043, matp.DistanceMap["dis_under_20"])
		fs.Add(5044, matp.DistanceMap["dis_21_40"])
		fs.Add(5045, matp.DistanceMap["dis_41_60"])
		fs.Add(5046, matp.DistanceMap["dis_61_80"])
		fs.Add(5047, matp.DistanceMap["dis_81_100"])
		fs.Add(5048, matp.DistanceMap["dis_101_200"])
		fs.Add(5049, matp.DistanceMap["dis_201_300"])
		fs.Add(5050, matp.DistanceMap["dis_301_400"])
		fs.Add(5051, matp.DistanceMap["dis_401_500"])
		fs.Add(5052, matp.DistanceMap["dis_above_500"])
		fs.Add(5053, matp.LikeTypeMap["like_type_like"])
		fs.Add(5054, matp.LikeTypeMap["like_type_dislike"])
		fs.Add(5055, matp.LikeTypeMap["like_type_superlike"])
		fs.Add(5056, matp.AffectionMap["affection_single"])
		fs.Add(5057, matp.AffectionMap["affection_dating"])
		fs.Add(5058, matp.AffectionMap["affection_stable"])
		fs.Add(5059, matp.AffectionMap["affection_married"])
		fs.Add(5060, matp.AffectionMap["affection_open_re"])
		fs.Add(5061, matp.AffectionMap["affection_relationship"])
		fs.Add(5062, matp.AffectionMap["affection_waiting"])
		fs.Add(5063, matp.AffectionMap["affection_secret"])
		fs.Add(5064, matp.MobileSysMap["mobile_sys_ios"])
		fs.Add(5065, matp.MobileSysMap["mobile_sys_android"])
		fs.Add(5066, matp.TotalCountMap["total_count"])
		fs.Add(5067, matp.FreqWeekMap["monday"])
		fs.Add(5068, matp.FreqWeekMap["tuesday"])
		fs.Add(5069, matp.FreqWeekMap["wednesday"])
		fs.Add(5070, matp.FreqWeekMap["thursday"])
		fs.Add(5071, matp.FreqWeekMap["friday"])
		fs.Add(5072, matp.FreqWeekMap["saturday"])
		fs.Add(5073, matp.FreqWeekMap["sunday"])
		fs.Add(5074, matp.FreqTimeMap["time_0_2"])
		fs.Add(5075, matp.FreqTimeMap["time_2_4"])
		fs.Add(5076, matp.FreqTimeMap["time_4_6"])
		fs.Add(5077, matp.FreqTimeMap["time_6_8"])
		fs.Add(5078, matp.FreqTimeMap["time_8_10"])
		fs.Add(5079, matp.FreqTimeMap["time_10_12"])
		fs.Add(5080, matp.FreqTimeMap["time_12_14"])
		fs.Add(5081, matp.FreqTimeMap["time_14_16"])
		fs.Add(5082, matp.FreqTimeMap["time_16_18"])
		fs.Add(5083, matp.FreqTimeMap["time_18_20"])
		fs.Add(5084, matp.FreqTimeMap["time_20_22"])
		fs.Add(5085, matp.FreqTimeMap["time_22_24"])
		fs.Add(5086, matp.ContinuesUse["coutinues_count"])

	}

	if ctx.GetUserInfo() != nil {
		user := ctx.GetUserInfo().(*UserInfo)
		if user.UserCache != nil {
			curr := user.UserCache
			fs.Add(4000, float32(memu.Age))
			fs.Add(4001, float32(memu.Height))
			fs.Add(4002, float32(memu.Weight))
			fs.AddCategory(4030, 13, -1, rutils.GetInt(memu.Horoscope), -1)
			fs.AddCategory(4031, 10, -1, memu.Affection, -1)
			uRole, uWantRoles := rutils.GetInt(curr.RoleName), rutils.GetInts(curr.WantRole)
			fs.AddCategory(4032, 10, -1, uRole, -1) // 自我认同
			fs.AddCategories(4033, 10, -1, uWantRoles, -1)

			// 交叉
			fs.AddCategory(6000, 2, 0, rutils.GetInt(rutils.IsInInts(role, uWantRoles)), 0)
			fs.AddCategory(6002, 2, 0, rutils.GetInt(rutils.IsInInts(uRole, wantRoles)), 0)
		}
	}

	return fs
}
